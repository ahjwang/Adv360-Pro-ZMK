#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp LS(T) &kp Y &kp P &kp E &kp SPACE &kp S &kp O &kp M &kp E &kp T &kp H &kp I &kp N &kp G &kp DOT &kp DOT &kp DOT>;
        };

        macro_comma_space: macro_comma_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "MACRO_COMMA_SPACE";
        };

        cmd_alt: cmd_alt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk_cust LCMD &sk_cust LALT>;
            label = "CMD_ALT";
        };

        ctrl_cmd: ctrl_cmd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk_cust LEFT_CONTROL &sk_cust LCMD>;
            label = "CTRL_CMD";
        };

        ctrl_alt: ctrl_alt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk_cust LEFT_CONTROL &kp LEFT_ALT>;
            label = "CTRL_ALT";
        };

        ctrl_cmd_alt: ctrl_cmd_alt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_CONTROL &sk_cust LCMD &sk LEFT_ALT>;
            label = "CTRL_CMD_ALT";
        };

        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        ht_num: ht_num {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_NUM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <100>;
            require-prior-idle-ms = <0>;
        };

        lt_cust: lt_cust {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_CUST";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
        };

        ht_cust: ht_cust {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_CUST";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        sk_cust: sk_cust {
            compatible = "zmk,behavior-sticky-key";
            label = "SK_CUST";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };
    };

    macros {
    };

    combos {
        compatible = "zmk,combos";

        combo_comma_space {
            bindings = <&macro_comma_space>;
            key-positions = <56 70>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&sl 1                  &kp N1  &kp N2      &kp N3    &kp N4     &kp N5  &bt BT_SEL 4                                                                    &bt BT_CLR  &kp N6  &kp N7  &kp N8     &kp N9    &kp N0     &sl 2
&kp TAB                &kp Q   &kp W       &kp E     &kp R      &kp T   &bt BT_SEL 0                                                                    &bt BT_NXT  &kp Y   &kp U   &kp I      &kp O     &kp P      &kp GRAVE
&sk_cust LEFT_SHIFT    &kp A   &kp S       &kp D     &kp F      &kp G   &bt BT_SEL 1  &bootloader  &kp C_BRIGHTNESS_INC      &bl BL_TOG    &bootloader  &bt BT_PRV  &kp H   &kp J   &kp K      &kp L     &kp APOS   &sk RIGHT_SHIFT
&sk_cust LCMD          &kp Z   &kp X       &kp C     &kp V      &kp B                              &kp C_BRIGHTNESS_DEC      &bl BL_CYCLE                           &kp N   &kp M   &kp COMMA  &kp DOT   &kp COLON  &sk_cust RIGHT_ALT
&sk_cust LEFT_CONTROL  &none   &caps_word  &kp LEFT  &kp RIGHT          &mo 3         &mo 4        &none                     &kp DEL       &kp ENTER    &kp SPACE           &kp UP  &kp DOWN   &kp SEMI  &none      &sk_cust RIGHT_CONTROL
            >;
        };

        fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &trans                                      &trans  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans  &none                                       &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &none   &trans  &trans      &trans  &trans  &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans   &trans   &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans                 &trans               &trans                 &trans                   &trans              &trans                                      &trans         &trans                  &trans           &trans               &trans                       &trans                        &trans
&trans  &trans                 &kp GREATER_THAN     &kp RIGHT_BRACE        &kp RIGHT_PARENTHESIS    &kp RIGHT_BRACKET   &trans                                      &trans         &kp PLUS                &kp EQUAL        &kp ESCAPE           &kp UNDER                    &kp MINUS                     &trans
&trans  &ht_num EXCL NUMBER_1  &ht_num AT NUMBER_2  &ht_num HASH NUMBER_3  &ht_num DOLLAR NUMBER_4  &ht_num PERCENT N5  &trans  &trans  &trans      &trans  &trans  &trans         &ht_num CARET NUMBER_6  &ht_num AMPS N7  &ht_num ASTERISK N8  &ht_num LEFT_PARENTHESIS N9  &ht_num RIGHT_PARENTHESIS N0  &trans
&trans  &kp SPACE              &kp LESS_THAN        &kp LEFT_BRACE         &kp LEFT_PARENTHESIS     &kp LEFT_BRACKET                    &trans      &trans                         &kp BACKSLASH           &kp SLASH        &trans               &trans                       &trans                        &trans
&trans  &trans                 &kp CAPS             &trans                 &trans                                       &trans  &trans  &trans      &trans  &trans  &kp BACKSPACE                          &trans           &trans               &trans                       &trans                        &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans            &trans      &trans      &trans  &trans                                      &trans  &trans         &trans           &kp RG(UP_ARROW)    &trans           &trans  &trans
&trans  &trans  &trans            &trans      &trans      &trans  &trans                                      &trans  &kp PAGE_UP    &kp LG(LEFT)     &kp UP_ARROW        &kp RG(RIGHT)    &trans  &trans
&trans  &trans  &trans            &trans      &trans      &trans  &trans  &trans  &trans      &trans  &trans  &trans  &kp PAGE_DOWN  &kp LEFT_ARROW   &kp DOWN_ARROW      &kp RIGHT_ARROW  &trans  &trans
&trans  &trans  &trans            &trans      &trans      &trans                  &trans      &trans                  &trans         &trans           &kp LG(DOWN_ARROW)  &kt RIGHT_SHIFT  &trans  &trans
&trans  &trans  &kp C_PLAY_PAUSE  &kp C_PREV  &kp C_NEXT          &trans  &trans  &trans      &trans  &trans  &trans                 &kp C_VOLUME_UP  &kp C_VOLUME_DOWN   &kp C_MUTE       &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        cond_1 {
            if-layers = <2 4>;
            then-layer = <4>;
        };
    };
};
