#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
        #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        ht_num: ht_num {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_NUM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <150>;
            require-prior-idle-ms = <0>;
        };

        lt_cust: lt_cust {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_CUST";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        ht_cust: ht_cust {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_CUST";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        sk_cust: sk_cust {
            compatible = "zmk,behavior-sticky-key";
            label = "SK_CUST";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };

        code_layer: code_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "CODE_LAYER";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        colon_question: colon_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COLON_QUESTION";
            bindings = <&kp COLON>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        backspace_del: backspace_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DEL";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        colon_semi: colon_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COLON_SEMI";
            bindings = <&kp COLON>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        under_greater: under_greater {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDER_GREATER";
            bindings = <&kp UNDER>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        macro_comma_space: macro_comma_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "macro_comma_space";
        };

        space_after: space_after {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &sl 5>;
            label = "SPACE_AFTER";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_macro1 {
            bindings = <&macro_comma_space>;
            key-positions = <56 70>;
        };

        L_bootloader {
            bindings = <&bootloader>;
            key-positions = <36 52>;
        };

        alt_cmd {
            bindings = <&sk_cust LA(LCMD)>;
            key-positions = <66 69>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        main {
            bindings = <
&sl 1                  &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &bt BT_SEL 4                                                                                             &bt BT_CLR  &kp N6  &kp N7  &kp N8     &kp N9     &kp N0     &sl 2
&kp TAB                &kp Q      &kp W     &kp E     &kp R      &kp T   &bt BT_SEL 0                                                                                             &bt BT_NXT  &kp Y   &kp U   &kp I      &kp O      &kp P      &kp GRAVE
&sk_cust LCMD          &kp A      &kp S     &kp D     &kp F      &kp G   &bt BT_SEL 1       &sl 4      &sk_cust LC(LS(LCMD))      &sk_cust RC(RS(RIGHT_ALT))  &sk_cust RS(RCTRL)  &bt BT_PRV  &kp H   &kp J   &kp K      &kp L      &kp APOS   &sk RALT
&sk_cust LEFT_SHIFT    &kp Z      &kp X     &kp C     &kp V      &kp B                                 &sk_cust LC(LCMD)          &sk_cust RC(RIGHT_ALT)                                      &kp N   &kp M   &kp COMMA  &kp DOT    &kp SLASH  &sk_cust RIGHT_SHIFT
&sk_cust LEFT_CONTROL  &kp EQUAL  &kp PLUS  &kp LEFT  &kp RIGHT          &lt_cust 3 ESCAPE  &kp ENTER  &sk_cust LS(LCMD)          &sk_cust LS(RIGHT_ALT)      &backspace_del      &kp SPACE           &kp UP  &kp DOWN   &kp MINUS  &kp UNDER  &sk_cust RIGHT_CONTROL
            >;
        };

        fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &trans                                      &trans  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans  &none                                       &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &none   &trans  &trans      &trans  &trans  &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans   &trans   &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        code {
            bindings = <
&trans  &trans     &trans         &trans                 &trans    &trans           &trans                                      &trans  &trans    &trans     &trans              &trans          &trans       &trans
&trans  &kp N1     &kp N2         &kp N3                 &kp N4    &kp N5           &trans                                      &trans  &kp N6    &kp N7     &kp N8              &kp N9          &kp N0       &trans
&trans  &kp TAB    &sk LG(LALT)   &kp LEFT_PARENTHESIS   &kp LBKT  &kp LEFT_BRACE   &trans  &trans  &trans      &trans  &trans  &trans  &kp LEFT  &kp DOWN   &kp UP              &kp RIGHT       &colon_semi  &trans
&trans  &kp LG(Z)  &sk_cust LCMD  &kp RIGHT_PARENTHESIS  &kp RBKT  &kp RIGHT_BRACE                  &trans      &trans                  &kp BSLH  &kp EQUAL  &space_after COMMA  &under_greater  &kp MINUS    &trans
&trans  &kp CAPS   &caps_word     &trans                 &trans                     &trans  &trans  &trans      &trans  &trans  &trans            &trans     &trans              &trans          &trans       &trans
            >;
        };

        funcs {
            bindings = <
&trans  &trans  &trans            &trans      &trans      &trans  &trans                                         &trans  &trans  &trans           &trans             &trans      &trans  &trans
&trans  &trans  &trans            &trans      &trans      &trans  &trans                                         &trans  &trans  &trans           &trans             &trans      &trans  &trans
&trans  &trans  &trans            &trans      &trans      &trans  &trans  &trans  &trans      &trans     &trans  &trans  &trans  &trans           &trans             &trans      &trans  &trans
&trans  &trans  &trans            &trans      &trans      &trans                  &trans      &trans                     &trans  &trans           &caps_word         &trans      &trans  &trans
&trans  &trans  &kp C_PLAY_PAUSE  &kp C_PREV  &kp C_NEXT          &trans  &trans  &trans      &kp SPACE  &trans  &trans          &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &kp C_MUTE  &trans  &trans
            >;
        };

        override {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &kp SPACE          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
