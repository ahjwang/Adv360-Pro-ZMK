#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
        #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        ht_num: ht_num {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_NUM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <150>;
            require-prior-idle-ms = <0>;
        };

        lt_cust: lt_cust {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_CUST";
            bindings = <&mo>, <&sk_cust>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        ht_cust: ht_cust {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_CUST";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        sk_cust: sk_cust {
            compatible = "zmk,behavior-sticky-key";
            label = "SK_CUST";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };

        code_layer: code_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "CODE_LAYER";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        colon_question: colon_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COLON_QUESTION";
            bindings = <&kp COLON>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        backspace_del: backspace_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DEL";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        macro_comma_space: macro_comma_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "macro_comma_space";
        };

        space_after: space_after {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &sl 5>;
            label = "SPACE_AFTER";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_cmd_alt {
            bindings = <&sk_cust LG(LALT)>;
            key-positions = <66 69>;
        };

        combo_macro1 {
            bindings = <&macro_comma_space>;
            key-positions = <56 70>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        main {
            bindings = <
&sl 1                  &kp N1             &kp N2      &kp N3    &kp N4     &kp N5  &bt BT_SEL 4                                                                                     &bt BT_CLR  &kp N6  &kp N7  &kp N8     &kp N9    &kp N0             &sl 2
&kp TAB                &kp Q              &kp W       &kp E     &kp R      &kp T   &bt BT_SEL 0                                                                                     &bt BT_NXT  &kp Y   &kp U   &kp I      &kp O     &kp P              &kp GRAVE
&sk_cust LEFT_SHIFT    &kp A              &kp S       &kp D     &kp F      &kp G   &bt BT_SEL 1     &bootloader      &kp C_BRIGHTNESS_INC       &bl BL_TOG    &bootloader           &bt BT_PRV  &kp H   &kp J   &kp K      &kp L     &kp APOS           &sk RIGHT_SHIFT
&sk_cust LCMD          &kp Z              &kp X       &kp C     &kp V      &kp B                                     &kp C_BRIGHTNESS_DEC       &bl BL_CYCLE                                    &kp N   &kp M   &kp COMMA  &kp DOT   &colon_question    &sk_cust RIGHT_ALT
&sk_cust LEFT_CONTROL  &sk_cust LC(LCMD)  &caps_word  &kp LEFT  &kp RIGHT          &code_layer 3 3  &lt_cust 4 LCMD  &sk_cust LC(LA(LCMD))      &kp DEL       &ht_cust RALT RETURN  &kp SPACE           &kp UP  &kp DOWN   &kp SEMI  &sk_cust LC(LALT)  &sk_cust RIGHT_CONTROL
            >;
        };

        fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &trans                                      &trans  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans  &none                                       &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &none   &trans  &trans      &trans  &trans  &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans   &trans   &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        code {
            bindings = <
&trans  &trans           &trans                          &trans                    &trans                      &trans                     &trans                                         &trans          &trans             &trans              &trans               &trans               &trans              &trans
&trans  &space_after N1  &space_after N2                 &space_after N3           &space_after N4             &space_after N5            &trans                                         &trans          &space_after N6    &space_after N7     &space_after N8      &space_after N9      &space_after N0     &trans
&trans  &kp TAB          &space_after LEFT_PARENTHESIS   &space_after LEFT_BRACE   &space_after LEFT_BRACKET   &space_after LESS_THAN     &trans  &trans  &trans      &trans     &trans  &trans          &space_after PLUS  &space_after EQUAL  &space_after ESCAPE  &space_after UNDER   &space_after MINUS  &trans
&trans  &kp SPACE        &space_after RIGHT_PARENTHESIS  &space_after RIGHT_BRACE  &space_after RIGHT_BRACKET  &space_after GREATER_THAN                  &trans      &trans                             &space_after BSLH  &space_after FSLH   &space_after COMMA   &space_after PERIOD  &space_after COLON  &trans
&trans  &trans           &kp CAPS                        &trans                    &trans                                                 &trans  &trans  &trans      &kp SPACE  &trans  &backspace_del                     &trans              &trans               &trans               &trans              &trans
            >;
        };

        nav {
            bindings = <
&trans  &trans     &trans            &trans      &trans      &trans  &trans                                         &trans          &trans          &trans           &trans              &trans           &trans  &trans
&trans  &trans     &trans            &trans      &trans      &trans  &trans                                         &trans          &kp PAGE_UP     &kp LG(LEFT)     &kp LG(UP_ARROW)    &kp RG(RIGHT)    &trans  &trans
&trans  &trans     &trans            &trans      &trans      &trans  &trans  &trans  &trans      &trans     &trans  &trans          &kp LEFT_ARROW  &kp DOWN_ARROW   &kp UP_ARROW        &kp RIGHT_ARROW  &trans  &trans
&trans  &kp SPACE  &trans            &trans      &trans      &trans                  &trans      &trans                             &kp PAGE_DOWN   &trans           &kp LG(DOWN_ARROW)  &kt RIGHT_SHIFT  &trans  &trans
&trans  &trans     &kp C_PLAY_PAUSE  &kp C_PREV  &kp C_NEXT          &trans  &trans  &trans      &kp SPACE  &trans  &backspace_del                  &kp C_VOLUME_UP  &kp C_VOLUME_DOWN   &kp C_MUTE       &trans  &trans
            >;
        };

        override {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &kp SPACE          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
